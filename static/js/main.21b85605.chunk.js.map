{"version":3,"sources":["services/http.service.ts","components/song-page/song-page.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fetchSongs","songNameToSearch","Promise","resolve","reject","a","axios","get","response","data","console","error","SongPage","useState","isSongsLoading","setIsSongsLoading","searchSongText","setSearchSongText","songs","setSongs","handleSearchSongSubmitClickEvent","event","songsFetched","warn","preventDefault","searchSongTextSubmitButtonClasses","trim","className","onSubmit","e","type","placeholder","value","onInput","target","disabled","onClick","style","marginTop","SongsTable","getHighlightedText","text","textToHighlight","parts","split","RegExp","map","part","i","toLowerCase","backgroundColor","length","song","id","title","String","chordsPresent","tabTypes","artist","name","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21b85605.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { Song } from \"../models/song.model\";\r\n\r\nexport function fetchSongs(songNameToSearch: string): Promise<Song[]> {\r\n  return new Promise<Song[]>(async (resolve, reject) => {\r\n    try {\r\n      let response = await axios.get(\r\n        `https://www.songsterr.com/a/ra/songs.json?pattern=${songNameToSearch}`\r\n      );\r\n\r\n      resolve(response.data);\r\n    } catch (error) {\r\n      console.error(\"error\", error);\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n","import { useState } from \"react\";\r\nimport { Song } from \"../../models/song.model\";\r\nimport { fetchSongs } from \"../../services/http.service\";\r\nimport \"./song-page.component.css\";\r\n\r\nexport const SongPage = () => {\r\n  const [isSongsLoading, setIsSongsLoading] = useState<boolean>(false);\r\n  const [searchSongText, setSearchSongText] = useState<string>(\"\");\r\n  const [songs, setSongs] = useState<Song[]>([]);\r\n\r\n  const handleSearchSongTextInput = (event: any) => {\r\n    setSearchSongText(event.target.value);\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleSearchSongSubmitClickEvent = async (event: any) => {\r\n    try {\r\n      setIsSongsLoading(true);\r\n      let songsFetched: Song[] = await fetchSongs(searchSongText);\r\n      setSongs(songsFetched);\r\n    } catch (error) {\r\n      console.warn(\"error\", error);\r\n    }\r\n    setIsSongsLoading(false);\r\n\r\n    event.preventDefault();\r\n  };\r\n\r\n  let searchSongTextSubmitButtonClasses: string = \"btn btn-primary\";\r\n  if (searchSongText.trim() === \"\") {\r\n    searchSongTextSubmitButtonClasses += \" disabled\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"row pageRow\">\r\n      <div className=\"col-12\">\r\n        <h2 className=\"searchSongHeading\">Search Song</h2>\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <form\r\n              className=\"form-inline searchSongContainer\"\r\n              onSubmit={(e) => e.preventDefault()}\r\n            >\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control col-11\"\r\n                placeholder=\"Enter song/artist name to search for eg: One\"\r\n                value={searchSongText}\r\n                onInput={(e) => {\r\n                  handleSearchSongTextInput(e);\r\n                }}\r\n              />\r\n              <input\r\n                type=\"submit\"\r\n                placeholder=\"Search\"\r\n                disabled={searchSongText.trim() === \"\"}\r\n                className={searchSongTextSubmitButtonClasses}\r\n                onClick={(e) => handleSearchSongSubmitClickEvent(e)}\r\n              />\r\n            </form>\r\n          </div>\r\n        </div>\r\n\r\n        <div style={{ marginTop: \"20px\" }}>\r\n          {isSongsLoading ? (\r\n            <div>Loading Songs</div>\r\n          ) : (\r\n            <SongsTable songs={songs} searchSongText={searchSongText} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SongsTable = ({\r\n  songs,\r\n  searchSongText,\r\n}: {\r\n  songs: Song[];\r\n  searchSongText: string;\r\n}) => {\r\n  function getHighlightedText(text: string, textToHighlight: string) {\r\n    const parts: string[] = text.split(\r\n      new RegExp(`(${textToHighlight})`, \"gi\")\r\n    );\r\n    return (\r\n      <span>\r\n        {parts.map((part, i) => (\r\n          <span\r\n            key={i}\r\n            style={\r\n              part.toLowerCase() === textToHighlight.toLowerCase()\r\n                ? { backgroundColor: \"yellow\" }\r\n                : {}\r\n            }\r\n          >\r\n            {part}\r\n          </span>\r\n        ))}\r\n      </span>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      {songs?.length > 0 && searchSongText.trim().length > 0 && (\r\n        <div className=\"table-responsive\">\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Song Id</th>\r\n                <th>Title</th>\r\n                <th>Chords Present</th>\r\n                <th>Tab Types</th>\r\n                <th>Artist Id</th>\r\n                <th>Artist Type</th>\r\n                <th>Artist Name</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {songs.map((song) => (\r\n                <tr key={String(song.id)}>\r\n                  <td>{song.id}</td>\r\n                  <td>{getHighlightedText(song.title, searchSongText)}</td>\r\n                  <td>{String(song.chordsPresent)}</td>\r\n                  <td>{song.tabTypes}</td>\r\n                  <td>{song.artist.id}</td>\r\n                  <td>{song.artist.type}</td>\r\n                  <td>\r\n                    {getHighlightedText(song.artist.name, searchSongText)}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport { SongPage } from \"./components/song-page/song-page.component\";\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <SongPage />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}